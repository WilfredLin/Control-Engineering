import sympy as sp
import numpy as np
import matplotlib.pyplot as plt

# Define the variables for the block diagram reduction
s = sp.symbols('s')  # Laplace variable

# Function to calculate the transfer function of a series connection
def series_connection(G1, G2):
    return G1 * G2

# Function to calculate the transfer function of a parallel connection
def parallel_connection(G1, G2):
    return G1 + G2

# Function to calculate the transfer function of a feedback loop
def feedback_loop(G, H):
    return G / (1 + G * H)

# Function to convert a block diagram to a signal-flow graph
def block_diagram_to_signal_flow(G1, G2, H, connection_type):
    if connection_type == 'series':
        G = series_connection(G1, G2)
    elif connection_type == 'parallel':
        G = parallel_connection(G1, G2)
    elif connection_type == 'feedback':
        G = feedback_loop(G1, H)
    else:
        raise ValueError("Invalid connection type. Choose 'series', 'parallel', or 'feedback'.")
    
    return G

# Example transfer functions
G1 = 1 / (s + 2)  # First transfer function
G2 = 1 / (s + 3)  # Second transfer function
H = 1 / (s + 1)   # Feedback transfer function

# Convert block diagrams to signal-flow graphs
# Series connection
G_series = block_diagram_to_signal_flow(G1, G2, None, 'series')
print(f'Series Connection Signal-Flow Graph Transfer Function: {G_series}')

# Parallel connection
G_parallel = block_diagram_to_signal_flow(G1, G2, None, 'parallel')
print(f'Parallel Connection Signal-Flow Graph Transfer Function: {G_parallel}')

# Feedback loop
G_feedback = block_diagram_to_signal_flow(G1, G2, H, 'feedback')
print(f'Feedback Loop Signal-Flow Graph Transfer Function: {G_feedback}')

# Function to perform gain design for transient response
def gain_design(G, desired_overshoot, desired_settling_time):
    # Calculate the gain based on the desired transient response
    zeta = -np.log(desired_overshoot) / np.sqrt(np.pi**2 + (-np.log(desired_overshoot))**2)
    wn = 4 / (zeta * desired_settling_time)
    
    # Transfer function for a second-order system
    G_gain = wn**2 / (s**2 + 2*zeta*wn*s + wn**2)
    
    # Calculate the overall gain
    K = G_gain / G
    return K

# Gain design for transient response
desired_overshoot = 0.1  # 10% overshoot
desired_settling_time = 2  # 2 seconds settling time
K = gain_design(G_feedback, desired_overshoot, desired_settling_time)
print(f'Gain for Desired Transient Response: {K}')

# Function to plot the step response of a transfer function
def plot_step_response(G, t_range):
    t_vals = np.linspace(t_range[0], t_range[1], 100)
    response_vals = [sp.inverse_laplace(sp.expand(G)).subs(s, val).evalf() for val in t_vals]
    
    plt.plot(t_vals, response_vals)
    plt.title('Step Response of the Transfer Function')
    plt.xlabel('Time (s)')
    plt.ylabel('Response')
    plt.grid()
    plt.show()

# Plot the step response for the feedback loop transfer function
plot_step_response(G_feedback, (0, 10))

import numpy as np

def routh_hurwitz(coefficients):
    n = len(coefficients) - 1  # Degree of the polynomial
    if n % 2 == 1:
        # If the degree is odd, add a zero coefficient
        coefficients.append(0)
        n += 1

    # Create the Routh array
    routh_array = np.zeros((n//2 + 1, (n//2) + 1))
    routh_array[0, :len(coefficients[0:n+1:2])] = coefficients[0:n+1:2]
    routh_array[1, :len(coefficients[1:n+1:2])] = coefficients[1:n+1:2]

    for i in range(2, n//2 + 1):
        for j in range(len(routh_array[i]) - 1):
            a = routh_array[i-1, 0]
            b = routh_array[i-2, j+1]
            c = routh_array[i-2, 0]
            d = routh_array[i-1, j+1]

            routh_array[i, j] = (a * b - c * d) / a if a != 0 else 0

    return routh_array

# Example usage
coefficients = [1, 3, 3, 1]  # Coefficients of the polynomial
routh_array = routh_hurwitz(coefficients)
print("Routh-Hurwitz Array:")
print(routh_array)

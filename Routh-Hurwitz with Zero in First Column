import numpy as np

def routh_hurwitz(coefficients):
    n = len(coefficients) - 1
    if n % 2 == 1:
        coefficients.append(0)
        n += 1

    # Create the Routh array
    routh_array = np.zeros((n // 2 + 1, n + 1))

    # Fill the first two rows of the Routh array
    routh_array[0, :len(coefficients[::2])] = coefficients[::2]
    routh_array[1, :len(coefficients[1::2])] = coefficients[1::2]

    # Calculate the Routh array
    for i in range(2, n // 2 + 1):
        for j in range(n - 1):
            a = routh_array[i - 1, 0]
            b = routh_array[i - 2, j + 1]
            c = routh_array[i - 2, 0]
            d = routh_array[i - 1, j + 1]
            routh_array[i, j] = (a * b - c * d) / a if a != 0 else 0

    return routh_array

# Example usage:
coefficients = [1, 0, 3, 2]  # Coefficients of the polynomial
routh_array = routh_hurwitz(coefficients)
print(routh_array)
